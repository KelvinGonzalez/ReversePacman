<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pacman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_speed = global.move_speed;
dir = 0;
hsp = move_speed * ((dir == 0) - (dir == 2));
vsp = move_speed * ((dir == 3) - (dir == 1));
target_x = 0;
target_y = 0;
targeting = false;
dir_x = 0;
dir_y = 0;

update_path_time = global.move_speed / global.blocks_per_second;
//alarm[0] = 1;
path = ds_list_create();
big_dot_path = ds_list_create();
point_threshold = 1;

ghost_paths = ds_list_create();
for (var i = 0; i &lt; control.ghost_limit; i++) {
    ghost_paths[| i] = ds_list_create();
}

distance_threshold = 6 * 2;

path_intersected = false;

frenzy = false;
frenzy_duration = 5 * 60;
frenzy_path = 0;
danger = false;

animation_frame = 0;
frame_count = 2;
animation_duration = 15;
alarm[2] = animation_duration;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation_frame++;
if (animation_frame == frame_count) animation_frame = 0;

alarm[2] = animation_duration;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frenzy = false;
with(obj_ghost) afraid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(path);
ds_list_destroy(big_dot_path);
path = find_nearest_dot(to_grid(x), to_grid(y));
big_dot_path = find_nearest_big_dot(to_grid(x), to_grid(y));

for (var i = 0; i &lt; control.ghost_count; i++) {
    ghost = control.ghosts[i];
    ds_list_destroy(ghost_paths[| i]);
    ghost_paths[| i] = shortest_path(to_grid(x), to_grid(y), to_grid(ghost.x), to_grid(ghost.y));
}

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!targeting) {
    //get_path();
    //ds_list_destroy(path);
    //find_nearest_dot(to_grid(x), to_grid(y));
    if (frenzy) {
        /*if (paths_intersect(path, ghost_paths, distance_threshold)) {
            find_direction(to_grid(x), to_grid(y), ghost_paths, distance_threshold);
            targeting = true;
            danger = true;
        }
        else {*/
            var f_path;
            if (ds_list_size(ghost_paths[| frenzy_path]) &gt; 0 &amp;&amp; ds_list_size(ghost_paths[| frenzy_path]) &lt; ds_list_size(path) * 0.5) {
                f_path = ghost_paths[| frenzy_path];
            }
            else {
                f_path = path;
            }
            var n = ds_list_size(f_path);
            if (n &gt; 2) {
                target_x = from_grid(f_path[| n-1-3]);
                target_y = from_grid(f_path[| n-1-2]);
                dir_x = sign(f_path[| n-1-3]-f_path[| n-1-1]);
                dir_y = sign(f_path[| n-1-2]-f_path[| n-1-0]);
                targeting = true;
            }
            danger = false;
        //}
    }
    else if (ghosts_nearby_count(ghost_paths, 8 * 2) &gt;= 1
        &amp;&amp; ds_list_size(big_dot_path) &gt; 2
        &amp;&amp; ds_list_size(big_dot_path) &lt;= 5 * 2
        &amp;&amp; !paths_intersect(big_dot_path, ghost_paths, 2 * 2)) {
        
        var n = ds_list_size(big_dot_path);
        target_x = from_grid(big_dot_path[| n-1-3]);
        target_y = from_grid(big_dot_path[| n-1-2]);
        dir_x = sign(big_dot_path[| n-1-3]-big_dot_path[| n-1-1]);
        dir_y = sign(big_dot_path[| n-1-2]-big_dot_path[| n-1-0]);
        targeting = true;
    }
    else if (paths_intersect(path, ghost_paths, distance_threshold)) {
        find_direction(to_grid(x), to_grid(y), ghost_paths, distance_threshold);
        targeting = true;
        path_intersected = true;
    }
    else {
        // follow path
        n = ds_list_size(path);
        if (n &gt; 2) {
            target_x = from_grid(path[| n-1-3]);
            target_y = from_grid(path[| n-1-2]);
            dir_x = sign(path[| n-1-3]-path[| n-1-1]);
            dir_y = sign(path[| n-1-2]-path[| n-1-0]);
            targeting = true;
        }
        path_intersected = false;
    }
}
else if (abs(target_x - x) &lt;= point_threshold &amp;&amp; abs(target_y - y) &lt;= point_threshold) {
    targeting = false;
}
else {
    x += dir_x * global.move_speed;
    y += dir_y * global.move_speed;
}

dot = instance_place(x, y, obj_dot);
if (dot != noone) {
    global.grid[# to_grid(x), to_grid(y)] = 0;
    with (dot) instance_destroy();
}

big_dot = instance_place(x, y, obj_big_dot);
if (big_dot != noone) {
    global.grid[# to_grid(x), to_grid(y)] = 0;
    frenzy = true;
    obj_ghost.afraid = true;
    alarm[1] = frenzy_duration;
    with (big_dot) instance_destroy();
}

if (frenzy) {
    min_size = ds_list_size(ghost_paths[| 0]);
    frenzy_path = 0;
    for (var i = 1; i &lt; ds_list_size(ghost_paths); i++) {
        if (instance_find(obj_ghost, i).afraid
            &amp;&amp; ds_list_size(ghost_paths[| i]) &gt; 0
            &amp;&amp; ds_list_size(ghost_paths[| i]) &lt; min_size) {
            
            min_size = ds_list_size(ghost_paths[| i]);
            frenzy_path = i;
        }
    }
}

image_index = get_dir(dir_x, dir_y) * frame_count + animation_frame;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//if (frenzy) draw_text(x, y, danger);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

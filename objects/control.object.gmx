<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.time_scale = 1;
global.blocks_per_second = 4;
global.move_speed = global.blocks_per_second * 16/60 * global.time_scale;
global.cell_size = 16;

width = to_grid(room_width);
height = to_grid(room_height);

global.grid = ds_grid_create(width, height);

for (var i = 0; i &lt; instance_number(obj_wall); i++) {
    var wall = instance_find(obj_wall, i);
    global.grid[# to_grid(wall.x), to_grid(wall.y)] = 1;
}
for (var i = 0; i &lt; instance_number(obj_dot); i++) {
    var dot = instance_find(obj_dot, i);
    global.grid[# to_grid(dot.x), to_grid(dot.y)] = 2;
}
for (var i = 0; i &lt; instance_number(obj_big_dot); i++) {
    var big_dot = instance_find(obj_big_dot, i);
    global.grid[# to_grid(big_dot.x), to_grid(big_dot.y)] = 3;
}
global.grid[# to_grid(ghost_spawn.x), to_grid(ghost_spawn.y)] = 4;

ghost_count = 0;
ghost_limit = 4;
ghost_spawn_time = 60;
//alarm[0] = ghost_spawn_time;

revive_queue = ds_queue_create();

instance_deactivate_all(self);
start_level = false;

//path = shortest_path(to_grid(start.x), to_grid(start.y), to_grid(finish.x), to_grid(finish.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_level = true;
alarm[0] = ghost_spawn_time;
obj_pacman.alarm[0] = 1;
//obj_ghost.alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ghost_id = ds_queue_dequeue(revive_queue);
var ghost = ghosts[ghost_id];
instance_activate_object(ghost);
ghost.x = ghost_spawn.x;
ghost.y = ghost_spawn.y;
ghost.afraid = false;

if (!ds_queue_empty(revive_queue)) alarm[1] = ghost_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ghosts[ghost_count] = instance_create(ghost_spawn.x, ghost_spawn.y, obj_ghost);
ghosts[ghost_count].ghost_id = ghost_count;
ghost_count++;

var spawn_ghost_count;
if (global.level &gt;= 5) spawn_ghost_count = 2;
else if (global.level &gt;= 3) spawn_ghost_count = 3;
else spawn_ghost_count = ghost_limit

if (ghost_count &lt; spawn_ghost_count) alarm[0] = ghost_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!start_level) {
    if (keyboard_check_pressed(vk_space)) {
        instance_activate_all();
        alarm[2] = 1;
    }
}
else if (instance_number(obj_dot) == 0) room_goto(loss_screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_color(c_red);
for (var j = 0; j &lt; ghost_count; j++) {
    for (i = 0; i &lt; ds_list_size(ghosts[j].path)-2; i += 2) {
        offset = global.cell_size/2;
        cur_x = from_grid(ghosts[j].path[| i])+offset;
        cur_y = from_grid(ghosts[j].path[| i+1])+offset;
        next_x = from_grid(ghosts[j].path[| i+2])+offset;
        next_y = from_grid(ghosts[j].path[| i+3])+offset;
        draw_line(cur_x, cur_y, next_x, next_y);
    }
}
draw_set_color(c_green);
for (i = 0; i &lt; ds_list_size(obj_pacman.path)-2; i += 2) {
    offset = global.cell_size/2;
    cur_x = from_grid(obj_pacman.path[| i])+offset;
    cur_y = from_grid(obj_pacman.path[| i+1])+offset;
    next_x = from_grid(obj_pacman.path[| i+2])+offset;
    next_y = from_grid(obj_pacman.path[| i+3])+offset;
    draw_line(cur_x, cur_y, next_x, next_y);
}*/
/*for (var xx = 0; xx &lt; width; xx++) {
    for (var yy = 0; yy &lt; height; yy++) {
        draw_text(from_grid(xx, cell_size), from_grid(yy, cell_size), string(grid[# xx, yy]));
    }
}*/
draw_set_color(c_white);
var print_string;
print_string[0] = "
Level 1##
Catch Pacman to win!
";
print_string[1] = "
Level 2##
Big dots have now been added to#
the game. Watch out for Pacman!
";
print_string[2] = "
Level 3##
Ghosts move much slower than before!#
Make sure to strategize in order to#
make up for your speed debuff.
";
print_string[3] = "
Level 4##
You've lost a Ghost (Oh no!). Can you#
catch Pacman despite this fact?
";
print_string[4] = "
Level 5##
Many, many more big dots have suddenly#
appeared in the arena! Pacman will surely#
be much more of a threat now!
";
print_string[5] = "
Level 6##
This is the last level. It's just you#
and Pinky, and you're moving the slowest#
you have so far!
";
print_string[6] = "
Level 7??##
Nop, just the end. Congrats! Some would say#
that *you're* the *true* Pacman!
";
if (!start_level) {
    draw_text(room_width/2, room_height/2, print_string[global.level]);
}
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

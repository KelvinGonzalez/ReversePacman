<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.time_scale = 1;
global.blocks_per_second = 4;
global.move_speed = global.blocks_per_second * 16/60 * global.time_scale;
global.cell_size = 16;

width = to_grid(room_width);
height = to_grid(room_height);

global.grid = ds_grid_create(width, height);

for (var i = 0; i &lt; instance_number(obj_wall); i++) {
    var wall = instance_find(obj_wall, i);
    global.grid[# to_grid(wall.x), to_grid(wall.y)] = 1;
}
for (var i = 0; i &lt; instance_number(obj_dot); i++) {
    var dot = instance_find(obj_dot, i);
    global.grid[# to_grid(dot.x), to_grid(dot.y)] = 2;
}
for (var i = 0; i &lt; instance_number(obj_big_dot); i++) {
    var big_dot = instance_find(obj_big_dot, i);
    global.grid[# to_grid(big_dot.x), to_grid(big_dot.y)] = 3;
}

ghost_count = 0;
ghost_limit = 4;
ghost_spawn_time = 90;
alarm[0] = ghost_spawn_time;

revive_queue = ds_queue_create();

//path = shortest_path(to_grid(start.x), to_grid(start.y), to_grid(finish.x), to_grid(finish.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ghost_id = ds_queue_dequeue(revive_queue);
var ghost = ghosts[ghost_id];
instance_activate_object(ghost);
ghost.x = ghost_spawn.x;
ghost.y = ghost_spawn.y;

if (!ds_queue_empty(revive_queue)) alarm[1] = ghost_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ghosts[ghost_count] = instance_create(ghost_spawn.x, ghost_spawn.y, obj_ghost);
ghosts[ghost_count].ghost_id = ghost_count;
ghost_count++;

if (ghost_count &lt; ghost_limit-1) alarm[0] = ghost_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*swap_x = keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left);
swap_y = keyboard_check_pressed(vk_up) - keyboard_check_pressed(vk_down);
if (abs(swap_x) || abs(swap_y)) {
    var blinky = get_blinky();
    var swap_ghost = get_swap_ghost(blinky.x, blinky.y, swap_x, swap_y);
    blinky.ghost_id = swap_ghost.ghost_id;
    swap_ghost.ghost_id = 0;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
for (var j = 0; j &lt; ghost_count; j++) {
    for (i = 0; i &lt; ds_list_size(ghosts[j].path)-2; i += 2) {
        offset = global.cell_size/2;
        cur_x = from_grid(ghosts[j].path[| i])+offset;
        cur_y = from_grid(ghosts[j].path[| i+1])+offset;
        next_x = from_grid(ghosts[j].path[| i+2])+offset;
        next_y = from_grid(ghosts[j].path[| i+3])+offset;
        draw_line(cur_x, cur_y, next_x, next_y);
    }
}
draw_set_color(c_green);
for (i = 0; i &lt; ds_list_size(obj_pacman.path)-2; i += 2) {
    offset = global.cell_size/2;
    cur_x = from_grid(obj_pacman.path[| i])+offset;
    cur_y = from_grid(obj_pacman.path[| i+1])+offset;
    next_x = from_grid(obj_pacman.path[| i+2])+offset;
    next_y = from_grid(obj_pacman.path[| i+3])+offset;
    draw_line(cur_x, cur_y, next_x, next_y);
}
/*for (var xx = 0; xx &lt; width; xx++) {
    for (var yy = 0; yy &lt; height; yy++) {
        draw_text(from_grid(xx, cell_size), from_grid(yy, cell_size), string(grid[# xx, yy]));
    }
}*/
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
